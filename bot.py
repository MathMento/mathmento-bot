import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

BOT_TOKEN = "7526638876:AAGG1SF7VJP995VkqKkKD0F7sqIkii56Ooo"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------------------------- #
# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
# ---------------------------- #
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìò –ü—Ä–æ MathMento")
    kb.button(text="üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    kb.button(text="üí¨ –ü–∏—Ç–∞–Ω–Ω—è (FAQ)")
    kb.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

# ---------------------------- #
# –°—Ç–∞—Ä—Ç
# ---------------------------- #
@dp.message(Command("start"))
async def start_cmd(message: Message):
    try:
        photo = FSInputFile("start.png")
        caption = (
            f"üëã <b>–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!</b>\n\n"
            "–Ø ‚Äî ü§ñ <b>MathMentoBot</b> ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏!\n\n"
            "üìò –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá"
        )
        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=main_menu())
    except Exception:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª start.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ –≤ –ø–∞–ø–∫—É –∑ bot.py.", reply_markup=main_menu())

# ---------------------------- #
# –ü—Ä–æ MathMento
# ---------------------------- #
@dp.message(F.text == "üìò –ü—Ä–æ MathMento")
async def about(message: Message):
    try:
        photo = FSInputFile("–∞–≤–∞.jpg")
        caption = (
            "<b>üìó MathMento</b> ‚Äî –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ <b>–ù–ú–¢</b> —Ç–∞ —à–∫—ñ–ª—å–Ω–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.\n\n"
            "‚úÖ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è\n"
            "‚úÖ –û–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom / Meet\n"
            "‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç–∞—Ö\n"
            "‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7 üí¨\n\n"
            "üìÖ –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫ üëá"
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫", url="https://mathmento.github.io/mathmento2/#contacts")
        kb.button(text="üåê –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç", url="https://mathmento.github.io/mathmento2/")
        kb.button(text="üì∏ Instagram", url="https://www.instagram.com/nmt_math._/")
        kb.adjust(1)

        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=kb.as_markup())
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª '–∞–≤–∞.jpg'.")

# ---------------------------- #
# –ú—ñ–Ω—ñ-—Ç–µ—Å—Ç
# ---------------------------- #
user_steps = {}
user_correct = {}
user_tasks = {}

TASKS = [
    ("2 + 3", 5),
    ("7 - 4", 3),
    ("5 √ó 6", 30),
    ("9 √∑ 3", 3),
    ("4¬≤", 16),
    ("10 - 7 + 2", 5),
    ("3 √ó (2 + 1)", 9),
    ("15 √∑ 5", 3),
    ("8 + 12", 20),
    ("7 √ó 3 - 2", 19),
]

def get_random_tasks():
    return random.sample(TASKS, 3)

@dp.message(F.text == "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: Message):
    user_id = message.from_user.id
    tasks = get_random_tasks()
    user_tasks[user_id] = tasks
    user_steps[user_id] = 0
    user_correct[user_id] = 0

    first_example = tasks[0][0]
    await message.answer(f"üß© –ü–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç —ñ–∑ 3 –∑–∞–ø–∏—Ç–∞–Ω—å!\n\n1Ô∏è‚É£ –û–±—á–∏—Å–ª–∏: {first_example} = ?")

@dp.message(F.text.regexp(r"^-?\d+$"))
async def handle_answer(message: Message):
    user_id = message.from_user.id
    step = user_steps.get(user_id, 0)
    correct = user_correct.get(user_id, 0)
    tasks = user_tasks.get(user_id, [])

    if not tasks:
        return

    try:
        ans = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ üî¢")
        return

    if ans == tasks[step][1]:
        correct += 1

    step += 1
    user_steps[user_id] = step
    user_correct[user_id] = correct

    if step < 3:
        next_example = tasks[step][0]
        await message.answer(f"{step + 1}Ô∏è‚É£ –û–±—á–∏—Å–ª–∏: {next_example} = ?")
    else:
        emoji, comment = (
            ("üåü", "–ë–ª–∏—Å–∫—É—á–µ! –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫!") if correct == 3 else
            ("üôÇ", "–î–æ–±—Ä–µ! –©–µ —Ç—Ä–æ—Ö–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏!") if correct == 2 else
            ("ü§î", "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üí™")
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="üîÅ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="retry_test")
        kb.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫", url="https://mathmento.github.io/mathmento2/#contacts")
        await message.answer(
            f"{emoji} <b>–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {correct}/3 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö!\n\n{comment}",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
        user_steps[user_id] = 0

@dp.callback_query(F.data == "retry_test")
async def retry(callback: CallbackQuery):
    user_id = callback.from_user.id
    tasks = get_random_tasks()
    user_tasks[user_id] = tasks
    user_steps[user_id] = 0
    user_correct[user_id] = 0
    first_example = tasks[0][0]
    await callback.message.answer(f"üß© –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É!\n\n1Ô∏è‚É£ –û–±—á–∏—Å–ª–∏: {first_example} = ?")
    await callback.answer()

# ---------------------------- #
# –ü–∏—Ç–∞–Ω–Ω—è (FAQ)
# ---------------------------- #
@dp.message(F.text == "üí¨ –ü–∏—Ç–∞–Ω–Ω—è (FAQ)")
async def faq(message: Message):
    text = (
        "‚ùì <b>–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:</b>\n\n"
        "üìò <b>–Ø–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –∑–∞–Ω—è—Ç—Ç—è?</b>\n–û–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom –∞–±–æ Google Meet.\n\n"
        "‚è∞ <b>–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î —É—Ä–æ–∫?</b>\n60 —Ö–≤–∏–ª–∏–Ω.\n\n"
        "üéØ <b>–ß–∏ –≥–æ—Ç—É—î—Ç–µ –¥–æ –ù–ú–¢?</b>\n–¢–∞–∫! –ü–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑ —Ç–µ–æ—Ä—ñ—î—é, –ø—Ä–∞–∫—Ç–∏–∫–æ—é —Ç–∞ —Ç–µ—Å—Ç–∞–º–∏.\n\n"
        "üí∏ <b>–ß–∏ —î –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫?</b>\n–¢–∞–∫, –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π!\n\n"
        "üìÖ –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫¬ª, —â–æ–± –ø–æ—á–∞—Ç–∏ üëá"
    )
    await message.answer(text, parse_mode="HTML")

# ---------------------------- #
# –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫
# ---------------------------- #
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
async def signup(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç", url="https://mathmento.github.io/mathmento2/#contacts")
    await message.answer("üóì –û–±–µ—Ä–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å üëá", reply_markup=kb.as_markup())

# ---------------------------- #
# –ó–∞–ø—É—Å–∫
# ---------------------------- #
async def main():
    print("‚úÖ MathMentoBot –∑–∞–ø—É—â–µ–Ω–æ! –ß–µ–∫–∞—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
